//백준 11758 CCW
// p1,p2,p3 좌표가 주어질 때 이른 선분이 시계방향인지 반시계 방향인지 푸는
//CCW 알고리즘으로 푸는 전형적인 문제이다.
//p1-p2 , p2-p3 의 벡터외적을 구하면 된다. (외적은 두 선분의 사이각이 앞 선분을 기준으로 뒷선분이 반시계방향에 있으면 +양수, 시계방향이면 -음수, 일직선이면 0을 반환하게 된다.)
//시간복잡도는 상수시간이다.

#include <iostream>

using namespace std;
//좌표의 범위가 10000으로 나올 수 있는 최대 값이 20억을 넘지 않으므로 int 자료형을 사용했다.
struct vector2{
    int x,y;
    vector2(int x1=0,int y1=0)
    {
        x=x1,y=y1;
    }
    int cross(const vector2& point)
    {
        return x*point.y-y*point.x;
    }
};

vector2 operator - (const vector2 & point1,const vector2 & point2)
{
    return vector2(point1.x-point2.x,point1.y-point2.y);
}

int main()
{
    vector2 p1,p2,p3;
    cin>>p1.x>>p1.y>>p2.x>>p2.y>>p3.x>>p3.y;
    int ans=(p2-p1).cross(p3-p1);
    cout<< (ans>=0?(ans==0?0:1):-1); // 양수면 1 , 음수면 -1, 0이면 0반환.
    return 0;
}
