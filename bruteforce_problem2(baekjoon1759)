//백준 1759
//입력의 크기가 작아 bruteforce로 가능. cCl 최대(15C7 로 충분히 시간 안에 풀 수 있음)
// 정렬된 암호이기에 순서를 강제해 조합개념으로 풀 수 있고, 모든 경우의 수에 대해 조건이 부합한지 확인하면 됌.
//시간 복잡도는 O(cCl * L) 로 최악의 경우 15C7 * 7 충분히 시간안에 계산되는 값임.

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int l=0; //편의를 위해 
char vowel[5]={'a','e','i','o','u'}; //데이터랑 코드를 따로 분리함.

bool check(vector<char>&password) //모음 1개 , 자음 2개이상인지 확인해주는 작업.
{
    int vo=0,co=0; // 모음 개수, 자음 개수
    for(int i=0;i<password.size();i++)
    {
        bool iscons=true;
        for(int j=0;j<5;j++)
        {
            if(password[i]==vowel[j])
            {
                vo+=1;
                iscons=false;
                break;
            }
        }
        if(iscons)
            co+=1;
    }
    return (vo > 0 and co > 1) ? 1 : 0;
}


void print_password(vector<char>&alphabet,vector<char>&password,int start) //몇번째 순서를 알려주는 인자를(start)받아서 코딩을 좀 더 효율적으로 짰음.
{
    if(password.size()==l)
    {
        if(check(password))
        {
            for(int i=0;i<password.size();i++)
                cout<<password[i];
            cout<<'\n';
        }
        return;
    }
    
    
    for(int i=start;i<alphabet.size();i++)
    {
        password.push_back(alphabet[i]);
        print_password(alphabet,password,i+1);
        password.pop_back();
    }
}

int main()
{
    int c=0;
    cin>>l>>c;
    
    vector<char>alphabet(c);
    vector<char>password;
    
    for(int i=0;i<c;i++)
    {
        cin>>alphabet[i];
    }
    
    sort(alphabet.begin(),alphabet.end()); //오름차순 출력을 위해 정렬
    
    print_password(alphabet,password,0);
    
    return 0;
}
