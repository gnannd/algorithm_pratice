그리디 알고리즘
재귀 호출 하면서 각 단계마다 모든 방법을 고려해 보지 않고 가장 좋은 방법만을 선택.
그리디 알고리즘이 사용되는 2가지 경우
1.탐욕법을 사용해도 항상 최적해를 구할 수 있다. ->모든 단계를 고려해보는 동적계획법보다 수행시간이 훨씬 빠름.
2.근사해를 구할 때.->코딩대회나 테스트에서는 제한됨.

그리디는 최적해를 얻을 수 있는 접근이 직관적이지 않는 경우가 많아 정당성을 증명하는 과정을 연습해두는게 중요함.

정당성 증명:
1.greedy choice property: 답의 모든 부분을 고려하지 않고 탐욕적으로만 선택하더라도 최적해를 구할 수 있다.
즉, 성립한다는 것은 각 단계에서 탐욕적으로 내리는 선택이 항상 최적해로 가는 길 중 하나이다.

1번 속성의 경우, 각 단계에서 우리가 선택한 답을 포함하는 최적해가 존재함을 보이면 됌.-> 우리가 선택한 답과 다른 최적해가 존재함을 가정하고, 이걸 조작해서 우리가 선택한 답을 포함하는 최적해로 바꿀 수 있을을 보이면 됌.
최적해로 나올 수 있는 모든 경우에 대해서 우리가 선택한 방식으로 바꿀 수 있다는 것은 즉 우리가 선택한 답이 최적해에 무조건 포함된다. ->최적해를 구할 수 있다.
우리가 선택한 방식으로 바꿀 수 있다는 것은 바꿔도 손해를 보지 않는다는 의미. 예를 들어 최소값을 구하는거라면 우리가 선택한 방식으로 바꿀경우 결과값이 전보다 같거나 작을것이다. -> 좋아지면 좋아지지 나빠지지는 않는다.

2.optimal substructure: 항상 최적의 선택만을 내려서 전체 문제의 최적해를 얻을 수 있다.
동적계획법으로 최적값을 구한다면 각 단계마다 모든 선택을 고려해서 최적값을 구하듯
그리디도 최적값을 구한다면 각 단계에 있어 가장 좋은 선택만을 해서 최적값을 구하는건데, 선택 후에 남은 부분문제들에 대해서도 당연히 최적값을 구해야 전체 최적해를 얻을 수 있다.
결국 부분문제들에 대해서도 가장 좋은 선택만을 하게 될거고 항상 최적의 선택을 하는것이 전체 문제의 최적해를 얻는 것이다.
이 속성은 너무 자명해서 증명이 따로 필요없는 경우가 많음.

