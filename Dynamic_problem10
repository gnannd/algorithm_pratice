/*백준 2066 카드놀이
카드 36개를 9그룹으로 나눠서 쌓아두는데 각 카드는 숫자를 나타내는 5가지, 모양을 나타내는 4가지 조합으로 표현하다.
이 때 맨위에 올려진 카드들 중 숫자가 같은 카드 끼리 없앨 수 있는데 여러 조합이 있으면 랜덤으로 없애면 된다.
이런 과정을 계속해서 반복해서 카드들을 다 없앨 때, 없어지는 확률이 얼마나 되는지 구하는 문제이다.

먼저 생각나는건 당연히 모든 조합을 고려해 보는 것이다. 각 그룹의 맨위에 올려진 
카드 9장에 같은 숫자인 두장을 찾아 없애니까 최대 탐색의 수는 9C2 이고.
이런짓을 18번 반복하게 되니까 대충 시간 복잡도 생각하면 (9C2)^18, 당연히 이거보다는 적게 걸리겠지만,
감안하더라도 시간 안에 풀기는 힘들어 보이는건 안다.

그래서 다이나믹을 생각해 볼 수 있었는데, 각 그룹이 4장씩 쌓여있고 총 9개 그룹이 있다.
그럼 현재 상태의 수를 각 그룹의 몇번째 카드인지 총 9개 그룹에 대해 생각하면 5^9 개인 것을 알 수 있다.
즉 나올 수 있는 문제가 5^9개인데, 브루트포스는 (9C2)^18 인 걸 생각하면 얼마나 많은 중복문제가 생겼는지 
짐작 할 수 있다. 시간 복잡도를 생각해 보면 상태의수 5^9 * 탐색의 수 9C2 이므로 시간내에 충분히 풀 수 있다.
그래서 이문제는 다이나믹을 활용하여 푸는 문제이다. 5= 4 + 카드를 다없애 없는 경우

참고로 모양은 신경안써도 된다. 이유는 같은 숫자이면 없애는 조건이고, 각 그룹의 몇번 째 카드인지를 입력의 상태로
받기 때문이다. 그리고 입력의 상태를 비트마스킹을 이용해서 풀었다. 그래야 고차원 벡터를 만들바에 훨씬 편하다.
또 double의 정밀도로 절대/상대오차 10^-6 허용해주는 조건에 만족하니까 오차 신경 안써도 된다. 

시간복잡도: O(5^9 * 9C2)
실제로 약80ms 시간 내에 수행되었다.
*/

#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

double GetPro(int order,vector<vector<int>>&card,vector<double>&memo)
{
    if(order==((int)pow(5,9)-1)) return 1;
    
    double &ret=memo[order];
    if(ret!=-1) return ret;
    
    ret=0;
    int size=0;
    for(int i=0;i<8;i++)
    {
        for(int j=i+1;j<9;j++)
        {
            int one_order=(order%(int)pow(5,i+1))/(int)pow(5,i);
            int two_order=(order%(int)pow(5,j+1))/(int)pow(5,j);
            if((one_order==4) or (two_order==4))
                continue;
            int one=card[i][one_order];
            int two=card[j][two_order];
            if(one==two)
            {
                ret+=GetPro(order+(int)pow(5,i)+(int)pow(5,j),card,memo);
                size+=1;
            }
        }
    }
    if(size!=0)
        ret=ret/size;
    return ret;
    
}

int main()
{
    vector<vector<int>>card(9,vector<int>(4)); //표현하는 9개의 카드를 1~9로 바꾸어 표현하겠다 (편리성)
    vector<double>memo(int(pow(5,9)),-1);
    for(int i=0;i<9;i++)
    {
        for(int j=3;j>=0;j--) //맨위부터 순서대로 저장하겠다.
        {
            string word;
            cin>>word;
            if(word[0]=='A')
            {
                card[i][j]=9;
            }
            else if(word[0]=='K')
            {
                card[i][j]=8;
            }
            else if(word[0]=='Q')
            {
                card[i][j]=7;
            }
            else if(word[0]=='J')
            {
                card[i][j]=6;
            }
            else if(word[0]=='T')
            {
                card[i][j]=5;
            }
            else
            {
                card[i][j]=int(word[0])-54; //-48 -5
            }
            
        }
    }
    
    double answer=GetPro(0,card,memo);
    cout<<answer;
    return 0;
}
