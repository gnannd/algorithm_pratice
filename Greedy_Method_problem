//백준 1781 컵라면
//처음에 모든조합을 생각해 다이나믹으로 풀려고 했으나 n이 최대 20만이므로
//데드라인(최대 n이하)까지 고려하면 n^2의 알고리즘으로 풀 수 없다.
//이문제는 두가지 조건을 알아야 한다.
//1. 각 데드라인에서 푸는 문제수는 최대 데드라인값이다. ex) 데드라인이 3이면 이 데드라인 문제에서만 3개 넘게 풀 수 없다.
//2. 1~n 데이드라인 에서 푼 문제 수 합은 n을 넘어갈 수 없다.
//이 두가지만 생각해서 낸 방식은 
//데드라인 별 오름차순,각 데드라인에서 컵라면의 수 내림차순으로 정렬.
//그리고 각 데드라인(i)를 순회하면서 각 데드라인에 정렬되어 있는 값들중 인덱스 0~i-1 까지 minheap에 삽입한다.
//여기서 2번째 조건을 유지하기 위해서 개수가 초과하면 낮은거 부터 잘라낸다.
//그리고 마지막에 minheap에 값을 다 추출한다.
//여기서 편의를 위해 우선순위 queue를 사용.
//minheap 삽입 lgn  * 모든문제를 돌기때문에 n = nlgn
//시간 복잡도: nlgn으로 시간안에 충분히 풀 수 있다.
//정당성 증명: 간단하게 귀류법으로 증명 가능 내가 생각한 방식으로 나올 수 없는 더 큰 답이 나왔다고 가정.
//나는 각 데드라인에서 나올수있는 최대인 애들을 순서대로 될 수 있는 최대개수만큼 뽑은건데
//더 큰답이 나왔으면 이미 내가 한 방식에서 뽑혀서 나왔어야함. ->결국 더 큰 답이 나올 순 없음 모순임.

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;


int main()
{
    int n=0;
    cin>>n;
    
    vector<vector<int>>cup_lamen(n+1);
    
    priority_queue<int,vector<int>,greater<int>>pq;
    
    int max_deadline=-1;
    
    for(int i=0;i<n;i++)
    {
        int num=0,cnt=0;
        cin>>num>>cnt;
        cup_lamen[num].push_back(cnt);
        max_deadline=max(max_deadline,num);
    }
    
    for(int i=1;i<=max_deadline;i++) //차피 전체 길이가 n이여서 nlgn정도로 생각하면됌. 데드라인 별 큰순으로 정렬.
    {
        if(cup_lamen[i].size())
            sort(cup_lamen[i].begin(),cup_lamen[i].end(),greater<int>());
    }
    
    for(int i=1;i<=max_deadline;i++) //데드라인별 최대개수만큼 크기순으로 넣기.
    {
        for(int j=0;j<i;j++)
        {
            if(j<cup_lamen[i].size())
                pq.push(cup_lamen[i][j]);
            else //이거 break 안걸면 n^2 알고리즘이 됌.
                break;
        }
        while(pq.size()>i) //2번째 조건 유지지
            pq.pop();
    }
    
    int answer=0;
    
    for(int i=0;i<max_deadline;i++)
    {
        if(pq.size()>0)
        {
            answer+=pq.top();
            pq.pop();
        }
        else
            break;
    }
    cout<<answer;
    
    return 0;
}
