//백준 1103 게임
//시작위치부터 각위치에서 할 수 있는 모든 선택을 탐색한다.
//보드 상태랑 현재위치 를 입력값으로 메모제이션
//cache[y][x] : 현재 위치에서 최대 이동횟수. 여기서 이전 경로가 필요없는게 무한이 생겼다는거는 어떤 경로로 오든 그위치에 가면 무한이 생긴다는 것이기 때매.
//무한번 움직일 수 있는 경우만 처리해주면 된다.
// 지나온 경로중 하나의 위치에 방문 한다->무한번 움직일 수 있다. visit으로 경로를 표시하면서 탐색.
//시간 복잡도: O(nm)


#include <iostream>
#include <vector>

using namespace std;

int n=0,m=0;

int dy[4]={0,0,1,-1};
int dx[4]={1,-1,0,0};

int move_count(int y,int x,vector<vector<int>>&cache,vector<string>&board,vector<vector<int>>&visit) 
{
    
    int &ret=cache[y][x];
    if(ret!=-1)
        return ret;
        
    ret=0;
    
    for(int i=0;i<4;i++) //현재 위치에서 갈 수 있는 모든 경로 탐색.
    {
        int y1=y+dy[i]*(board[y][x]-'0');
        int x1=x+dx[i]*(board[y][x]-'0');
        if(y1<0 or y1>=n or x1<0 or x1>=m or board[y1][x1]=='H') // 다음경로가 게임오버일 경우
            continue;
        if(visit[y1][x1]==1) //무한 루프가 생기는 경우-> 즉, 방문했던 경로를 또 방문하는 경우
        {
            ret=1e9;
            break;
        }
        visit[y1][x1]=1;
        ret=max(ret,1+move_count(y1,x1,cache,board,visit));
        visit[y1][x1]=0;
    }
    
    return ret;
}

int main()
{
    
    cin>>n>>m;
    vector<string>board(n);
    
    for(int i=0;i<n;i++)
        cin>>board[i];
        
    vector<vector<int>>cache(n,vector<int>(m,-1));
    vector<vector<int>>visit(n,vector<int>(m,0)); //경로 표시
    
    visit[0][0]=1;
    int answer=move_count(0,0,cache,board,visit);
    
    if(answer>=1e9) //무한이 있으면.
        cout<<-1;
    else
        cout<<answer+1; //마지막으로 게임오버 되는 이동도 포함 +1
    
    return 0;
}
