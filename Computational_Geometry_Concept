계산 기하(computational geometry) 알고리즘
점, 선, 다각형과 원 등 각종 기하학적 도형을 다루는 알고리즘(2차원의 평면 도형과 3차원의 입체 도형을 모두 다룸)
  
++학부 선형 대수나 고등학교 수준의 기하학을 코드로 구현할 수 있어야 함.(가능한 간결하고 예외가 작은 형태로 구현할 수 있으면 좋음)
++선형대수는 벡터와 행렬을 통해 공간과 구조를 수학적으로 분석하고 표현하는 도구

계산 기하의 도구들
-벡터(vector): 방향과 거리의 쌍으로 시작점이 중요하지 않음.   ++ 두 점 사이의 상대적인 위치를 표현할 때 사용할 수 있음.
점과 직선, 선분을 간편하게 표현할 수 있음.
다음과 같은 정의와 표현방식을 통해 코드를 간결하고 문제를 푸는데 있어 강력한 도구로 사용할 수 있음. 

bool operator == (const vector2& rhs) const{    // 비교
  return x == rhs.x && y == rhs.y;
}

bool operator < (const vector2& rhs) const{  //대소 비교 이렇게 정의 하는 이유는 계산 편의를 위해
  return x != rhs.x ? x < rhs.x : y < rhs.y;
}

vector2 operator + (const vector2& rhs) const{ //덧셈
  return vector2(x + rhs.x, y + rhs.y);
}

vector2 operator - (const vector2& rhs) const{ //뺄셈
  return vector2(x - rhs.x, y - rhs.y);
}

vector2 operator * (double rhs) const{  //곱셈
  return vector2(x*rhs, y*rhs);
}

double norm() const { return hypot(x, y); }  //벡터 길이 반환

vector2 normalize() const{  //방향이 같은 단위벡터 반환 (크기가 1인 벡터)
  return vector2(x/norm(),y/norm());
} 

double polar() const { return fmod(atan2(y,x) + 2*PI, 2*PI); }  // 벡터의 방향이 x축의 양의 방향으로부터 반시계방향으로 얼마나 차이 나는지(atan 의범위가 [-180,180]이므로 실수 나머지연산을 통해 [0,360)으로 강제)

//내적
//벡터 내적의 정의를 이용해 두벡터 사이의 각도를 알 수 있음.
//내적은 흔히 다음과 같은 용도로 사용됌.
//벡터의 사이각 구하기, 벡터의 직각 여부 확인, 벡터의 사영
double dot(const vector2& rhs) const { 
  return x*rhs.x + y*rhs.y;
}

//외적
//두 개의 벡터가 주어졌을 때 이 두벡터에 모두 수직인 다른 벡터를 반환
//중요하게 이용하는 건 반환되는 벡터의 길이와 방향임.
//다음과 같은 용도로 사용됌.
//면적 계산,두 벡터의 방향 판별( a X b = |a||b|sin(@) 정의에서 두 벡터의 사이각이 아니라 a에서 b까지 반시계 방향으로 얼마나 회전하는가를 나타냄)
//반시계 방향이면 + , 시계 반향이면 - 값이 나옴. 이 성질을 이용해 두 벡터의 방향성을 판단함.
double cross(const vector2& rhs) const{
  return x*rhs.y - y*rhs.x;
}

//사영
//벡터 b에 수직으로 빛이 내리쬘 때, 벡터 a가 b 위에 드리우는 그림자를 a의 벡터 사영이라고 함.
vector2 project(const vector2& rhs) const{
  vector2 r = rhs.normalize();
  return r * r.dot(*this);
}

직선과 직선의 교차 
직선을 a + p*b 형태로 표현하면 쉽게 풀 수 있음. (한 점을 표현하는 하나의 벡터 a와 하나의 방향벡터 b로 표현, p는 실수값)    -- 이표현 정말 마니 사용하고 중요함.

선분과 선분의 교차
  두 직선의 교차로 생각한 후 한 직선위에 있는 경우에 상황을 잘 따져봐야함. 
  1. 두 선분이 서로 겹치지 않음.
  2. 두 선분이 한 점에서 닿음.
  3. 두 선분이 겹쳐짐.
  4. 한 선분이 다른 선분 안에 포함됨,
++ 교차점이 필요없는 문제의 경우, 단순하게 외적을 이용해 풀 수있음.

점과 선 사이의 거리
사영을 통해 쉽게 구할 수 있음. 

점과 선분 사이의 거리
선분을 포함하는 직선에 내린 수선이 선분 위에 떨어진다면 위랑 같지만 아닌경우는 선분의 양끝점 중 더 가까운 쪽과의 거리가 점과 선분 사이의 거리가 됌.

선분과 선분 사이의 거리
두 선분을 잇는 가장 가까운 선분은 최소한 두 선분 중 하나의 끝점에서 시작함(증명 가능함)

다각형(polygon)   -현실 세계를 계산 기하로 표현하는 데 필수적인 요소
-용어 정의
볼록 다각형이란, 모든 내각이 180도 미만인 다각형을 의미
오목 다각형이란, 180도를 넘는 내각을 갖는 다각형을 의미
단순 다각형이란, 다각형의 경계가 스스로를 교차하지 않는 다각형을 의미

단순 다각형(오목이든 볼록이든) 면적구하기
그냥 어느 한점 찍고 반시계 방향이든 시계방향이든 모든 인접한 두점과 함께 외적 구해서 다 더한 후 절대값씌우면 . -> 외적의 성질때문에 간단하게 증명 가능함.

내부/외부 판별
단순 다각형과 이 다각형의 경계 위에 있지 않는 점 q가 주어질 때 q가 다각형 외부에 있는지 내부에 있는지 확인하는 방법
-> q에서 시작해 오른쪽으로 쭉뻗은 반직선을 상상하고 다각형과 몇번이나 교차하는지 확인하면 됌. -> 짝수번이면 외부, 홀수 번이면 내부
예외)
1.모든 변과 반직선이 교차되는지 확인할 때 변의 끝점을 가로지리는 경우
2.반직선과 수평인 변이 있는 경우
해결)
반직선을 살짝 위로 올리면 됌.-> 실제로 올린다긴 보다 끝점과 같으면 반직선이 좀 더 위에 있다고 생각하기. 
ex) 
(변의 한점a의 y좌표>반직선의 y)!=(변의 한점b의 y좌표 > 반직선의 y) 이런식으로 같을 경우 반직선이 좀 더 위에 있다고 계산하면 예외 해결.




