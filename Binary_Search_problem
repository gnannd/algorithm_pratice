//백준 1253 좋다
// 어떤 수를 다른 수 두개의 합으로 나타낼 수 있다면 그 수를 좋다 라고 한다. 좋은 수는 몇개인가. 라는 문제 (주어지는 수의 개수는 2000 이하다.)
// 주어지는 수 크기가 10억이하이므로 int 자료형으로 충분히 풀 수 있을거라고 생각했다.
// 좋은 수는 자기 보다 작은 두 수의 합으로 이루어 진다. -> 이건 틀렸다 정수의 범워가 음수를 포함하기 때문에 첨에 잘못생각해서 헤맸다.
// c=a+b 라고 할 때 a가 주어지면 b라는 값이 있는지 찾으면 된다. c랑 b는 순회 하면 되니까 n^2걸리거고 b라는 값을 찾는걸 이분탐색을 이용하면.
// lgn이 걸린다.
// 이 문제는 이분탐색에 있어 자기자신을 포함해 더하는 부분과 같은 수를 두번 더해지는 부분의 예외를 잘 처리하는 것이 핵심이다.
//시간 복잡도는 O(n^2*lgn) 로 n이 2000이하라는 걸 감안하면 충분히 시간안에 풀 수 있을거라고 생각했다.
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool search(int target,vector<int>&number,int start,int end)
{
    int lo=start,hi=end;
    if(target<number[lo] or target>number[hi]) //반복문 불변식을 위해 예외 처리. 이코드는 없애도 문제없음. 차피 못찾으면 거짓 반환하기 때문에.
        return false;
    //lo<= target_var <= hi
    while(lo<=hi)
    {
        int mid=(lo+hi)/2;
        if(target<number[mid])
            hi=mid-1;
        else if(target>number[mid])
            lo=mid+1;
        else
            return true;
    }
    return false;
    
}

int main()
{
    int n=0;
    cin>>n;
    vector<int>number(n);
    for(int i=0;i<n;i++)
        cin>>number[i];
    
    sort(number.begin(),number.end());
    
    int answer=0;
    
    for(int i=0;i<n;i++)
    {
        bool good=false;
        for(int j=0;j<n;j++)
        {
            if(i!=j) //위에 핵심이라고 말한 부분들을 처리하기 위해 구간을 3구역으로 쪼개 탐색하였다.     
            {
                if(i<j)
                {
                    if(search(number[i]-number[j],number,0,i-1) or search(number[i]-number[j],number,i+1,j-1) or search(number[i]-number[j],number,j+1,n-1))
                    {
                        good=true;
                        break;
                    }
                }
                else
                {
                    if(search(number[i]-number[j],number,0,j-1) or search(number[i]-number[j],number,j+1,i-1) or search(number[i]-number[j],number,i+1,n-1))
                    {
                        good=true;
                        break;
                    }
                }
            }
        }
        if(good)
            answer++;
    }
    
    cout<<answer;
    
    return 0;
}
