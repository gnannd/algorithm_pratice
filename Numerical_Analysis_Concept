수치 해석은 직접 풀기 힘든 수학 문제를 근사적으로 푸는 알고리즘과 이들의 수치적 안정성, 오차의 범위 등을 연구하는 전산학의 한 분야이다.

유용하게 사용되는 수치 해석 기법
-이분법(bisection_method) ++참고로 응용으로는 우리가 자주 사용하는 이진 탐색 등 이 있음.
정의)
주어진 범위 [lo,hi] 내에서 어떤 함수 f(x)의 값이 0이 되는 지점을 수치적으로 찾아내는 기법

조건)
1.함수가 연속(단조 증가 함수가 아니여돋 됌 .. ++ 추가로 우리가 사용했던 이진탐색이 단조증가함수 느낌임)
2.함수의 그래프 상에서 x축 윗부분에 위치한 점과 아랫 부분에 위치한 점 하나를 우선 찾을 수 있어야함.
-> 중간값 정리에 의해 f(x)=0 인 지점이 무조건 하나 이상 존재하게 됨.

과정) ++ 이진 탐색과 동일함.
반복적으로 중간 지점의 f(x) 값을 확인하여 확실히 답이 있는 구간을 선택해 범위를 줄여나가며 찾으면 됌. (이때 2번째 조건을 유지해야함. ex)f(lo)<=f(hi) )
반복문 종료 후 최대 오차를 최소화 할 수 있는 [lo,hi] 범위의 중간 값을 반환.

*수치적 안정성을 위해 이분법에서는 반복문의 종료조건이 중요함. -> 이는 오차를 줄이는 반복횟수와 횟수가 계속되면 될수록 길어지는 수행속도의 타협에 있음.
그래서 for문을 100번돌림. 다음과 같은 이점을 가짐.
-오차가 매우 작아짐 적당히 큰 수도 다룰 수 있음.->절대 오차가 최대 |lo-hi|/(2^101) 이 됌
-무한 반복에 빠지지 않으면 최대 수행시간도 예상하기 쉬움.

내생각
다항식 문제를 풀 때 2번 조건을 잘 짜야함. 미분을 한다던가 해서 극점을 찾아 함수값이 0이 되게 하는 하는 해를 찾아야함. 
1차, 2차 방정식은 풀 수 있으니까 그이상의 고차 함수에 대해서는 재귀를 이용해 극점을 찾아 아까 말해듯이 이분법을 이용해 0이 되게 하는 값을 찾아 반환하여 고차함수에서도 0이 되게 하는 해를
구할 수 있다라는 것이 핵심인거 같다. 
