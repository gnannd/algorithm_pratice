수치 해석은 직접 풀기 힘든 수학 문제를 근사적으로 푸는 알고리즘과 이들의 수치적 안정성, 오차의 범위 등을 연구하는 전산학의 한 분야이다.

유용하게 사용되는 수치 해석 기법
-이분법(bisection_method) ++참고로 응용으로는 우리가 자주 사용하는 이진 탐색 등 이 있음.
정의)
주어진 범위 [lo,hi] 내에서 어떤 함수 f(x)의 값이 0이 되는 지점을 수치적으로 찾아내는 기법

조건)
1.함수가 연속(단조 증가 함수가 아니여돋 됌 .. ++ 추가로 우리가 사용했던 이진탐색이 단조증가함수 느낌임)
2.함수의 그래프 상에서 x축 윗부분에 위치한 점과 아랫 부분에 위치한 점 하나를 우선 찾을 수 있어야함.
-> 중간값 정리에 의해 f(x)=0 인 지점이 무조건 하나 이상 존재하게 됨.

과정) ++ 이진 탐색과 동일함.
반복적으로 중간 지점의 f(x) 값을 확인하여 확실히 답이 있는 구간을 선택해 범위를 줄여나가며 찾으면 됌. (이때 2번째 조건을 유지해야함. ex)f(lo)<=f(hi) )
반복문 종료 후 최대 오차를 최소화 할 수 있는 [lo,hi] 범위의 중간 값을 반환.

*수치적 안정성을 위해 이분법에서는 반복문의 종료조건이 중요함. -> 이는 오차를 줄이는 반복횟수와 횟수가 계속되면 될수록 길어지는 수행속도의 타협에 있음.
그래서 for문을 100번돌림. 다음과 같은 이점을 가짐.
-오차가 매우 작아짐 적당히 큰 수도 다룰 수 있음.->절대 오차가 최대 |lo-hi|/(2^101) 이 됌
-무한 반복에 빠지지 않으면 최대 수행시간도 예상하기 쉬움.

내생각
다항식 문제를 풀 때 2번 조건을 잘 짜야함. 미분을 한다던가 해서 극점을 찾아 함수값이 0이 되게 하는 하는 해를 찾아야함. 
1차, 2차 방정식은 풀 수 있으니까 그이상의 고차 함수에 대해서는 재귀를 이용해 극점을 찾아 아까 말해듯이 이분법을 이용해 0이 되게 하는 값을 찾아 반환하여 고차함수에서도 0이 되게 하는 해를
구할 수 있다라는 것이 핵심인거 같다. 

-삼분 검색
조건을 만족하는 함수의 최대점이나 최소점을 구할 때 유용하게 사용하는 기법.
이분법과 비슷하게 구간을 삼등분하여 하여 두 위치에서 함수값을 비교하여 후보구간의 크기를 3분의2로 계속 줄여나감.

조건) ++ 최소치를 구하는 문제는 반대 조건으로 생각하면 됌.
1.범위안에 한 개의 지역 극대점이 있다. -> 최대치를 포함하는 후보구간을 알고있어야함.
2.최대점 왼쪽에서는 항상 순증가, 오른쪽에서는 항상 순감소 해야 함.

장점)
1.미분 할 수 없는 함수에도 적용 가능
2.보통 국소 탐색 같은 알고리즘 등 보다 빠르게 동작
3.수렴 판정이 용이함 ->범위가 3분의 2로 계속 줄어들기 때문에 충분히 수렴했는지 알기 쉬움 (for 문을 100번돌렸을 때 충분히 오차범위가 확 줄어드는게 손쉽게 계산이 됌)


++ 알아두면 좋은 기본지식
-볼록 함수, 오목함수
수학적으로 볼록 함수를 그래프 상의 서로 다른 두 점을 직선으로 이었을 때 이 직선이 그래프 밑으로 내려가는 일이 없는 함수 (오목함수도 반대로 생각하면 됌)
f(x)가 볼록하면 -f(x)는 오목
볼록 함수와 볼록함수를 더한 결과도 볼록 함수.
볼록 함수에 상수를 곱한 결과도 볼록 함수.
선형 함수는 볼록함수 이면서 오목함수로 볼 수 있음.


